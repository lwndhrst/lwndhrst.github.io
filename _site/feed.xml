<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-05-30T12:47:35+02:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">windhorst.dev</title><subtitle>Graphics, Games and other fun stuff.</subtitle><author><name>Leon Windhorst</name><email>leon@windhorst.dev</email></author><entry><title type="html">3D Boids with C and Raylib</title><link href="http://localhost:4000/c/raylib/boids/spatial-partitioning/2024/05/27/3d-boids-with-raylib.html" rel="alternate" type="text/html" title="3D Boids with C and Raylib" /><published>2024-05-27T00:00:00+02:00</published><updated>2024-05-27T00:00:00+02:00</updated><id>http://localhost:4000/c/raylib/boids/spatial-partitioning/2024/05/27/3d-boids-with-raylib</id><content type="html" xml:base="http://localhost:4000/c/raylib/boids/spatial-partitioning/2024/05/27/3d-boids-with-raylib.html"><![CDATA[<div style="position: relative; overflow: hidden; width: 100%; padding-top: 56.25%;">
  <iframe style="position: absolute; top: 0; left: 0; bottom: 0; right: 0; width: 100%; height: 100%;" src="https://www.youtube.com/embed/tiQMZTRqvHI" allowfullscreen="allowfullscreen"></iframe>
</div>
<p><br /></p>

<ul>
  <li><a href="https://github.com/lwndhrst/cboids">github:lwndhrst/cboids</a></li>
</ul>

<h2 id="contents">Contents</h2>

<ol>
  <li><a href="#let-there-be-boids">Let there be Boids!</a></li>
  <li><a href="#turning-1000-draw-calls-into-1">Turning 1000 Draw Calls into 1</a></li>
  <li><a href="#multi-threading-the-simulation-loop-with-openmp">Multi-threading the Simulation Loop with OpenMP</a></li>
  <li><a href="#speeding-it-up-with-a-spatial-hash-grid">Speeding it up with a Spatial Hash Grid</a></li>
</ol>

<h2 id="let-there-be-boids">Let there be Boids!</h2>

<p>While I was looking for a small project to practice what I had heard about at
university, I stumbled upon Ben Eater’s demonstration of a simple <a href="https://eater.net/boids">2D Boid
Algorithm</a>. I thought it looked fun and it would allow
me to try out a few different things such as <em>instanced rendering</em>, <em>spatial
partitioning</em> and some basic <em>multi-threading</em>.</p>

<h3 id="how-do-boids-generally-work">How do Boids generally work?</h3>

<p>TODO:</p>
<ul>
  <li>boid properties</li>
  <li>behavioral constraints + pseudocode</li>
  <li><a href="https://vanhunteradams.com/Pico/Animal_Movement/Boids-algorithm.html">https://vanhunteradams.com/Pico/Animal_Movement/Boids-algorithm.html</a></li>
</ul>

<h3 id="implementing-3d-boids-with-c-and-raylib">Implementing 3D Boids with C and Raylib</h3>

<p>Pretty much all of our Computer Graphics courses at university required us to
use C++.</p>

<p>TODO:</p>
<ul>
  <li>setting up the simulation loop</li>
  <li>code snippets per constraint</li>
  <li>draw call per boid</li>
</ul>

<h2 id="turning-1000-draw-calls-into-1">Turning 1000 Draw Calls into 1</h2>

<p>TODO:</p>
<ul>
  <li>going from draw calls per boid to instanced rendering</li>
  <li>array of transforms</li>
  <li>vertex shader for instanced rendering</li>
</ul>

<h2 id="multi-threading-the-simulation-loop-with-openmp">Multi-threading the Simulation Loop with OpenMP</h2>

<p>TODO:</p>
<ul>
  <li>linear speedup</li>
</ul>

<h3 id="dangers-to-be-aware-of-">Dangers to be aware of …</h3>

<p>TODO:</p>
<ul>
  <li>data races, deadlocks, etc.</li>
</ul>

<h3 id="-and-why-its-easy-in-this-case">… and why it’s easy in this case</h3>

<p>TODO:</p>
<ul>
  <li>“double-buffered” simulation loop means read and write arrays are disjoint
  =&gt; can read without worry</li>
  <li>each thread gets a disjoint range of indices (by OpenMP) into write array
  =&gt; no race conditions for writing</li>
</ul>

<h2 id="speeding-it-up-with-a-spatial-hash-grid">Speeding it up with a Spatial Hash Grid</h2>

<p>TODO:</p>
<ul>
  <li>spatial partitioning techniques</li>
</ul>

<h3 id="the-simulation-loop-is-sloooow">The Simulation Loop is sloooow</h3>

<p>TODO:</p>
<ul>
  <li>O(n^2)</li>
</ul>

<h3 id="how-spatial-partitioning-can-speed-it-up">How Spatial Partitioning can speed it up</h3>

<p>TODO:</p>
<ul>
  <li>severly reduce search space</li>
</ul>

<h3 id="building-a-simple-spatial-hash-grid">Building a simple Spatial Hash Grid</h3>

<p>TODO:</p>
<ul>
  <li>API</li>
  <li>memory management</li>
  <li>…</li>
</ul>

<h3 id="integrating-it-into-the-simulation-loop">Integrating it into the Simulation Loop</h3>

<p>TODO:</p>
<ul>
  <li>multiple grids, one per thread to avoid write conflicts</li>
  <li>“double-buffered” =&gt; can read without worry</li>
</ul>

<h2 id="references">References</h2>

<ul>
  <li><a href="https://eater.net/boids">https://eater.net/boids</a></li>
  <li><a href="https://vanhunteradams.com/Pico/Animal_Movement/Boids-algorithm.html">https://vanhunteradams.com/Pico/Animal_Movement/Boids-algorithm.html</a></li>
</ul>]]></content><author><name>Leon Windhorst</name><email>leon@windhorst.dev</email></author><category term="c" /><category term="raylib" /><category term="boids" /><category term="spatial-partitioning" /><summary type="html"><![CDATA[]]></summary></entry></feed>